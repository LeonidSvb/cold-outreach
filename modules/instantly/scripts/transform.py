#!/usr/bin/env python3
"""
Instantly Data Transformation
Transforms JSON to Supabase RAW tables format
"""

from typing import Dict, Any, List
from datetime import datetime

def transform_campaigns(campaigns: List[Dict]) -> List[Dict[str, Any]]:
    """
    Transform campaigns for instantly_campaigns_raw table

    Schema from 002_instantly_raw_layer.sql:
    - instantly_campaign_id TEXT PRIMARY KEY
    - campaign_name TEXT
    - campaign_status INTEGER
    - leads_count, contacted_count, reply_count, emails_sent_count INTEGER
    - raw_json JSONB NOT NULL
    - synced_at, created_at, updated_at TIMESTAMP
    """
    transformed = []

    for campaign in campaigns:
        row = {
            # Primary key
            "instantly_campaign_id": campaign.get('campaign_id'),

            # Extracted fields for quick queries
            "campaign_name": campaign.get('campaign_name'),
            "campaign_status": campaign.get('campaign_status'),
            "leads_count": campaign.get('leads_count', 0),
            "contacted_count": campaign.get('contacted_count', 0),
            "reply_count": campaign.get('reply_count', 0),
            "emails_sent_count": campaign.get('emails_sent_count', 0),

            # Full JSON (preserves ALL data)
            "raw_json": campaign,

            # Timestamps
            "synced_at": datetime.now().isoformat(),
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }

        transformed.append(row)

    return transformed

def transform_accounts(accounts: List[Dict]) -> List[Dict[str, Any]]:
    """
    Transform accounts for instantly_accounts_raw table

    Schema:
    - email TEXT PRIMARY KEY
    - first_name, last_name TEXT
    - account_status, warmup_status, warmup_score INTEGER
    - raw_json JSONB NOT NULL
    - synced_at, created_at, updated_at TIMESTAMP
    """
    transformed = []

    for account in accounts:
        row = {
            # Primary key
            "email": account.get('email'),

            # Extracted fields
            "first_name": account.get('first_name'),
            "last_name": account.get('last_name'),
            "account_status": account.get('status'),
            "warmup_status": account.get('warmup_status'),
            "warmup_score": account.get('stat_warmup_score'),

            # Full JSON
            "raw_json": account,

            # Timestamps
            "synced_at": datetime.now().isoformat(),
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }

        transformed.append(row)

    return transformed

def transform_daily_analytics(daily: List[Dict],
                              campaign_id: str = None) -> List[Dict[str, Any]]:
    """
    Transform daily analytics for instantly_daily_analytics_raw table

    Schema:
    - id UUID PRIMARY KEY (generated by Supabase)
    - analytics_date DATE NOT NULL
    - instantly_campaign_id TEXT (optional)
    - sent, opened, unique_opened, replies, etc. INTEGER
    - raw_json JSONB NOT NULL
    """
    transformed = []

    for record in daily:
        row = {
            # Date identification
            "analytics_date": record.get('date'),

            # Optional campaign link
            "instantly_campaign_id": campaign_id,

            # Extracted metrics
            "sent": record.get('sent', 0),
            "opened": record.get('opened', 0),
            "unique_opened": record.get('unique_opened', 0),
            "replies": record.get('replies', 0),
            "unique_replies": record.get('unique_replies', 0),
            "clicks": record.get('clicks', 0),
            "unique_clicks": record.get('unique_clicks', 0),

            # Full JSON
            "raw_json": record,

            # Timestamps
            "synced_at": datetime.now().isoformat(),
            "created_at": datetime.now().isoformat()
        }

        transformed.append(row)

    return transformed

def validate_transformed_data(table: str, rows: List[Dict]) -> Dict[str, Any]:
    """
    Validate transformed data before upload

    Args:
        table: Table name
        rows: Transformed rows

    Returns:
        Dict with validation result
    """
    if not rows:
        return {
            "valid": False,
            "error": "No rows to validate"
        }

    # Check required fields based on table
    required_fields = {
        "instantly_campaigns_raw": ["instantly_campaign_id", "raw_json"],
        "instantly_accounts_raw": ["email", "raw_json"],
        "instantly_daily_analytics_raw": ["analytics_date", "raw_json"]
    }

    if table not in required_fields:
        return {
            "valid": False,
            "error": f"Unknown table: {table}"
        }

    # Validate each row has required fields
    for i, row in enumerate(rows):
        for field in required_fields[table]:
            if field not in row or row[field] is None:
                return {
                    "valid": False,
                    "error": f"Row {i}: missing required field '{field}'"
                }

    return {
        "valid": True,
        "rows_validated": len(rows)
    }

# Test function
if __name__ == "__main__":
    # Test transform functions
    test_campaign = {
        "id": "test-123",
        "name": "Test Campaign",
        "status": 2,
        "leads_count": 100,
        "contacted_count": 50,
        "reply_count": 5,
        "emails_sent_count": 75
    }

    result = transform_campaigns([test_campaign])
    print(f"Transformed campaigns: {len(result)}")
    print(f"Sample: {result[0]['instantly_campaign_id']}")

    # Validate
    validation = validate_transformed_data("instantly_campaigns_raw", result)
    print(f"Validation: {validation}")
