#!/usr/bin/env python3
"""
=== INSTANTLY UNIVERSAL DATA COLLECTOR ===
Version: 1.0.0 | Created: 2025-09-21

PURPOSE:
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö Instantly –ø–æ –∫–æ–Ω—Ñ–∏–≥—É –¥–ª—è dashboard

FEATURES:
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ –¥–∞—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ (real vs fake)
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dashboard
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã –º–µ—Ç—Ä–∏–∫

USAGE:
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CONFIG —Å–µ–∫—Ü–∏—é –Ω–∏–∂–µ
2. Run: python instantly_universal_collector.py
3. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ dashboard_data_{timestamp}.json

IMPROVEMENTS:
v1.0.0 - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º
"""

import subprocess
import json
import os
from datetime import datetime, timedelta
from pathlib import Path
from modules.logging.shared.universal_logger import get_logger

logger = get_logger(__name__)

# ============================================================================
# CONFIG SECTION - –ù–ê–°–¢–†–û–ô–¢–ï –ó–î–ï–°–¨
# ============================================================================

CONFIG = {
    # –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
    "API_KEY": "YzZlYTFiZmQtNmZhYy00ZTQxLTkyNWMtNDYyODQ3N2UyOTU0Om94cnhsVkhYQ3p3Rg==",
    "BASE_URL": "https://api.instantly.ai/api/v2",

    # –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò
    "DATE_RANGE": {
        "start_date": "2024-01-01",  # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ "auto" –¥–ª—è –∞–≤—Ç–æ-—Ä–∞—Å—á–µ—Ç–∞
        "end_date": "2025-12-31",    # –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ "today" –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
        "auto_days_back": 90         # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
    },

    # –ß–¢–û –°–û–ë–ò–†–ê–¢–¨
    "COLLECT": {
        "campaigns_overview": True,
        "campaigns_detailed": True,
        "daily_analytics": True,
        "steps_analytics": True,
        "accounts_data": True,
        "emails_sample": True,      # –û–±—Ä–∞–∑–µ—Ü –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        "warmup_data": False        # –ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    },

    # –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•
    "ANALYSIS": {
        "calculate_real_metrics": True,
        "estimate_ooo_percentage": 0.4,  # 40% –æ—Ç–≤–µ—Ç–æ–≤ = out-of-office
        "estimate_auto_percentage": 0.2,  # 20% –æ—Ç–≤–µ—Ç–æ–≤ = –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
        "opportunity_threshold": 1       # –ú–∏–Ω–∏–º—É–º –¥–ª—è —É—á–µ—Ç–∞ –∫–∞–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏—è
    },

    # –í–´–í–û–î
    "OUTPUT": {
        "save_raw_data": True,
        "save_dashboard_json": True,
        "save_summary_report": True,
        "results_dir": "results"
    }
}

# ============================================================================
# MAIN COLLECTOR CLASS
# ============================================================================

class InstantlyUniversalCollector:
    def __init__(self):
        self.config = CONFIG
        self.results_dir = Path(__file__).parent / self.config["OUTPUT"]["results_dir"]
        self.results_dir.mkdir(exist_ok=True)
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.collected_data = {}

    def collect_all_data(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üöÄ Starting Instantly Universal Data Collection")
        print(f"‚è∞ Timestamp: {self.timestamp}")
        print(f"üìÅ Results will be saved to: {self.results_dir}")
        print()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç
        start_date, end_date = self._prepare_dates()
        print(f"üìÖ Date range: {start_date} to {end_date}")
        print()

        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω—Ñ–∏–≥—É
        if self.config["COLLECT"]["campaigns_overview"]:
            self._collect_campaigns_overview()

        if self.config["COLLECT"]["campaigns_detailed"]:
            self._collect_campaigns_detailed()

        if self.config["COLLECT"]["daily_analytics"]:
            self._collect_daily_analytics(start_date, end_date)

        if self.config["COLLECT"]["steps_analytics"]:
            self._collect_steps_analytics()

        if self.config["COLLECT"]["accounts_data"]:
            self._collect_accounts_data()

        if self.config["COLLECT"]["emails_sample"]:
            self._collect_emails_sample()

        # –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if self.config["ANALYSIS"]["calculate_real_metrics"]:
            self._calculate_real_metrics()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._save_all_results()

        print(f"\n‚úÖ Collection completed!")
        print(f"üìä Dashboard data ready: dashboard_data_{self.timestamp}.json")

        return self.collected_data

    def _prepare_dates(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç –ø–æ –∫–æ–Ω—Ñ–∏–≥—É"""
        end_date = self.config["DATE_RANGE"]["end_date"]
        start_date = self.config["DATE_RANGE"]["start_date"]

        if end_date == "today":
            end_date = datetime.now().strftime("%Y-%m-%d")

        if start_date == "auto":
            days_back = self.config["DATE_RANGE"]["auto_days_back"]
            start_date = (datetime.now() - timedelta(days=days_back)).strftime("%Y-%m-%d")

        return start_date, end_date

    def _curl_request(self, endpoint, data=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ curl –∑–∞–ø—Ä–æ—Å–∞"""
        url = f"{self.config['BASE_URL']}/{endpoint}"
        headers = f"Authorization: Bearer {self.config['API_KEY']}"

        if data:
            # POST request
            cmd = [
                "curl", "-X", "POST",
                "-H", headers,
                "-H", "Content-Type: application/json",
                "-d", json.dumps(data),
                url
            ]
        else:
            # GET request
            cmd = ["curl", "-H", headers, url]

        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                return json.loads(result.stdout)
            else:
                print(f"‚ùå Error in curl request: {result.stderr}")
                return None
        except Exception as e:
            print(f"‚ùå Exception in curl request: {e}")
            return None

    def _collect_campaigns_overview(self):
        """–°–±–æ—Ä –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–π"""
        print("üìã Collecting campaigns overview...")

        data = self._curl_request("campaigns/analytics")
        if data:
            self.collected_data['campaigns_overview'] = data
            count = len(data) if isinstance(data, list) else 1
            print(f"   ‚úÖ Collected {count} campaigns")
        else:
            print("   ‚ùå Failed to collect campaigns overview")

    def _collect_campaigns_detailed(self):
        """–°–±–æ—Ä –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"""
        if 'campaigns_overview' not in self.collected_data:
            return

        print("üîç Collecting detailed campaign data...")
        campaigns = self.collected_data['campaigns_overview']

        detailed_campaigns = []
        for campaign in campaigns:
            campaign_id = campaign.get('campaign_id')
            if campaign_id:
                print(f"   üìä Getting details for: {campaign.get('campaign_name', 'Unknown')}")

                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                detail = self._curl_request(f"campaigns/analytics?id={campaign_id}")
                if detail and len(detail) > 0:
                    detailed_campaigns.append(detail[0])

        self.collected_data['campaigns_detailed'] = detailed_campaigns
        print(f"   ‚úÖ Collected detailed data for {len(detailed_campaigns)} campaigns")

    def _collect_daily_analytics(self, start_date, end_date):
        """–°–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        print("üìÖ Collecting daily analytics...")

        # –û–±—â–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        endpoint = f"campaigns/analytics/daily?start_date={start_date}&end_date={end_date}"
        data = self._curl_request(endpoint)

        if data:
            self.collected_data['daily_analytics_all'] = data
            print(f"   ‚úÖ Collected daily data for {len(data)} days")

        # –ü–æ –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        if 'campaigns_overview' in self.collected_data:
            daily_by_campaign = {}
            for campaign in self.collected_data['campaigns_overview']:
                campaign_id = campaign.get('campaign_id')
                campaign_name = campaign.get('campaign_name', 'Unknown')

                endpoint = f"campaigns/analytics/daily?campaign_id={campaign_id}&start_date={start_date}&end_date={end_date}"
                data = self._curl_request(endpoint)

                if data:
                    daily_by_campaign[campaign_id] = {
                        'name': campaign_name,
                        'data': data
                    }

            self.collected_data['daily_analytics_by_campaign'] = daily_by_campaign
            print(f"   ‚úÖ Collected daily data for {len(daily_by_campaign)} individual campaigns")

    def _collect_steps_analytics(self):
        """–°–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º"""
        if 'campaigns_overview' not in self.collected_data:
            return

        print("üî¢ Collecting steps analytics...")
        steps_by_campaign = {}

        for campaign in self.collected_data['campaigns_overview']:
            campaign_id = campaign.get('campaign_id')
            campaign_name = campaign.get('campaign_name', 'Unknown')

            data = self._curl_request(f"campaigns/analytics/steps?campaign_id={campaign_id}")
            if data:
                steps_by_campaign[campaign_id] = {
                    'name': campaign_name,
                    'steps': data
                }

        self.collected_data['steps_analytics'] = steps_by_campaign
        print(f"   ‚úÖ Collected steps data for {len(steps_by_campaign)} campaigns")

    def _collect_accounts_data(self):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ email –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
        print("üìß Collecting accounts data...")

        data = self._curl_request("accounts")
        if data:
            self.collected_data['accounts'] = data

            # –ê–Ω–∞–ª–∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            items = data.get('items', [])
            active_accounts = [acc for acc in items if acc.get('status') == 1]
            inactive_accounts = [acc for acc in items if acc.get('status') == -1]

            print(f"   ‚úÖ Total accounts: {len(items)}")
            print(f"   ‚úÖ Active: {len(active_accounts)}")
            print(f"   ‚ùå Inactive: {len(inactive_accounts)}")
        else:
            print("   ‚ùå Failed to collect accounts data")

    def _collect_emails_sample(self):
        """–°–±–æ—Ä –æ–±—Ä–∞–∑—Ü–∞ –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        print("üì® Collecting email samples...")

        data = self._curl_request("emails?limit=50")
        if data:
            self.collected_data['emails_sample'] = data
            items = data.get('items', [])
            print(f"   ‚úÖ Collected {len(items)} email samples")
        else:
            print("   ‚ùå Failed to collect email samples")

    def _calculate_real_metrics(self):
        """–†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å —É—á–µ—Ç–æ–º OOO –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤"""
        print("üßÆ Calculating real metrics...")

        if 'campaigns_detailed' not in self.collected_data:
            return

        ooo_rate = self.config["ANALYSIS"]["estimate_ooo_percentage"]
        auto_rate = self.config["ANALYSIS"]["estimate_auto_percentage"]

        enhanced_campaigns = []

        for campaign in self.collected_data['campaigns_detailed']:
            enhanced = campaign.copy()

            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            sent = campaign.get('emails_sent_count', 0)
            replies = campaign.get('reply_count', 0)
            opportunities = campaign.get('total_opportunities', 0)

            # –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            estimated_ooo = int(replies * ooo_rate)
            estimated_auto = int(replies * auto_rate)
            estimated_real_replies = max(0, replies - estimated_ooo - estimated_auto)
            estimated_positive_replies = opportunities if opportunities > 0 else max(0, int(estimated_real_replies * 0.3))

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            enhanced['analytics_enhanced'] = {
                'formal_reply_rate': round(replies / sent * 100, 2) if sent > 0 else 0,
                'estimated_ooo_replies': estimated_ooo,
                'estimated_auto_replies': estimated_auto,
                'estimated_real_replies': estimated_real_replies,
                'estimated_positive_replies': estimated_positive_replies,
                'real_reply_rate': round(estimated_real_replies / sent * 100, 2) if sent > 0 else 0,
                'positive_reply_rate': round(estimated_positive_replies / sent * 100, 2) if sent > 0 else 0,
                'bounce_rate': round(campaign.get('bounced_count', 0) / sent * 100, 2) if sent > 0 else 0,
                'opportunity_rate': round(opportunities / sent * 100, 2) if sent > 0 else 0
            }

            enhanced_campaigns.append(enhanced)

        self.collected_data['campaigns_with_real_metrics'] = enhanced_campaigns
        print(f"   ‚úÖ Enhanced {len(enhanced_campaigns)} campaigns with real metrics")

    def _save_all_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\nüíæ Saving results...")

        # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        if self.config["OUTPUT"]["save_raw_data"]:
            raw_file = self.results_dir / f"raw_data_{self.timestamp}.json"
            with open(raw_file, 'w', encoding='utf-8') as f:
                json.dump(self.collected_data, f, indent=2, ensure_ascii=False)
            print(f"   üìÑ Raw data: {raw_file.name}")

        # Dashboard JSON
        if self.config["OUTPUT"]["save_dashboard_json"]:
            dashboard_data = self._prepare_dashboard_data()
            dashboard_file = self.results_dir / f"dashboard_data_{self.timestamp}.json"
            with open(dashboard_file, 'w', encoding='utf-8') as f:
                json.dump(dashboard_data, f, indent=2, ensure_ascii=False)
            print(f"   üìä Dashboard data: {dashboard_file.name}")

        # Summary –æ—Ç—á–µ—Ç
        if self.config["OUTPUT"]["save_summary_report"]:
            summary = self._generate_summary()
            summary_file = self.results_dir / f"summary_{self.timestamp}.md"
            with open(summary_file, 'w', encoding='utf-8') as f:
                f.write(summary)
            print(f"   üìã Summary report: {summary_file.name}")

    def _prepare_dashboard_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dashboard"""
        dashboard = {
            "metadata": {
                "timestamp": self.timestamp,
                "collection_date": datetime.now().isoformat(),
                "config_used": self.config,
                "data_types": list(self.collected_data.keys())
            },
            "summary": {},
            "campaigns": [],
            "accounts": {},
            "daily_trends": [],
            "performance_metrics": {}
        }

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...
        if 'campaigns_with_real_metrics' in self.collected_data:
            dashboard["campaigns"] = self.collected_data['campaigns_with_real_metrics']

        if 'accounts' in self.collected_data:
            dashboard["accounts"] = self.collected_data['accounts']

        if 'daily_analytics_all' in self.collected_data:
            dashboard["daily_trends"] = self.collected_data['daily_analytics_all']

        return dashboard

    def _generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è summary –æ—Ç—á–µ—Ç–∞"""
        summary = f"""# INSTANTLY DATA COLLECTION SUMMARY
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Timestamp: {self.timestamp}

## Data Collected:
"""
        for key, value in self.collected_data.items():
            if isinstance(value, list):
                summary += f"- {key}: {len(value)} items\n"
            elif isinstance(value, dict):
                summary += f"- {key}: {len(value)} entries\n"
            else:
                summary += f"- {key}: collected\n"

        return summary

def main():
    logger.info("Instantly Universal Collector started")
    try:
        collector = InstantlyUniversalCollector()
        collector.collect_all_data()
        logger.info("Data collection completed successfully")
    except Exception as e:
        logger.error("Data collection failed", error=e)
        raise

if __name__ == "__main__":
    main()