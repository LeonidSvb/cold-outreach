import requests
import json
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_KEY = os.getenv('APOLLO_API_KEY')
BASE_URL = "https://api.apollo.io/v1"

def test_apollo_connection():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Apollo API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Apollo API...")
    
    headers = {
        'Cache-Control': 'no-cache',
        'Content-Type': 'application/json',
        'X-Api-Key': API_KEY
    }
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    data = {
        'q_organization_name': 'tesla',  # –ü–æ–∏—Å–∫ Tesla
        'page': 1,
        'per_page': 5  # –¢–æ–ª—å–∫–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/mixed_companies/search",
            headers=headers,
            data=json.dumps(data)
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(result.get('organizations', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for org in result.get('organizations', [])[:3]:
                print(f"üè¢ {org.get('name', 'N/A')}")
                print(f"   –î–æ–º–µ–Ω: {org.get('website_url', 'N/A')}")
                print(f"   LinkedIn: {org.get('linkedin_url', 'N/A')}")
                print(f"   –ò–Ω–¥—É—Å—Ç—Ä–∏—è: {org.get('industry', 'N/A')}")
                print(f"   –†–∞–∑–º–µ—Ä: {org.get('estimated_num_employees', 'N/A')} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
                print("---")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def test_people_search():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π"""
    print("\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ª—é–¥–µ–π...")
    
    headers = {
        'Cache-Control': 'no-cache',
        'Content-Type': 'application/json',
        'X-Api-Key': API_KEY
    }
    
    data = {
        'q_organization_name': 'microsoft',
        'person_titles': ['CEO', 'CTO', 'VP'],
        'page': 1,
        'per_page': 3
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/mixed_people/search",
            headers=headers,
            data=json.dumps(data)
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü–æ–∏—Å–∫ –ª—é–¥–µ–π —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ª—é–¥–µ–π: {len(result.get('people', []))}")
            
            for person in result.get('people', [])[:3]:
                print(f"üë§ {person.get('first_name', '')} {person.get('last_name', '')}")
                print(f"   –î–æ–ª–∂–Ω–æ—Å—Ç—å: {person.get('title', 'N/A')}")
                print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {person.get('organization', {}).get('name', 'N/A')}")
                print(f"   LinkedIn: {person.get('linkedin_url', 'N/A')}")
                print("---")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    if not API_KEY:
        print("‚ùå Apollo API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    else:
        test_apollo_connection()
        test_people_search()