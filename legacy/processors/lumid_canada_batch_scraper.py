#!/usr/bin/env python3
"""
Lumid Canada Batch Website Intelligence Scraper
–ú–∞—Å—Å–æ–≤—ã–π —Å–∫—Ä–µ–π–ø–∏–Ω–≥ –ø–µ—Ä–≤—ã—Ö 50 —Å–∞–π—Ç–æ–≤ –∏–∑ lumid_canada_20250108.csv
"""

import sys
import os
import time
import pandas as pd
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ dashboard –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'dashboard'))

# –ò–º–ø–æ—Ä—Ç—ã
from website_intelligence_with_dashboard import WebsiteIntelligenceWithDashboard

SCRIPT_STATS = {
    "script_name": "lumid_canada_batch_scraper",
    "version": "1.0.0",
    "purpose": "–ú–∞—Å—Å–æ–≤—ã–π —Å–∫—Ä–µ–π–ø–∏–Ω–≥ –ø–µ—Ä–≤—ã—Ö 50 —Å–∞–π—Ç–æ–≤ –∏–∑ lumid_canada_20250108.csv –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏",
    "total_runs": 0,
    "success_count": 0,
    "error_count": 0,
    "last_run": None,
    "avg_processing_time": 0,
    "improvements": [
        "v1.0.0 - –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∏ lumid –¥–∞–Ω–Ω—ã—Ö",
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å dashboard —Å–∏—Å—Ç–µ–º–æ–π",
        "HTTP-—Ç–æ–ª—å–∫–æ —Å–∫—Ä–µ–π–ø–∏–Ω–≥ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞"
    ]
}

class LumidCanadaBatchScraper:
    """–ë–∞—Ç—á-—Å–∫—Ä–µ–π–ø–µ—Ä –¥–ª—è –∫–∞–Ω–∞–¥—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π Lumid"""
    
    def __init__(self):
        self.processor = WebsiteIntelligenceWithDashboard()
        self.start_time = time.time()
        self.session_id = f"lumid_canada_batch_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
    def prepare_batch_file(self, input_file: str, batch_size: int = 50) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç CSV —Ñ–∞–π–ª —Å –ø–µ—Ä–≤—ã–º–∏ batch_size –∑–∞–ø–∏—Å—è–º–∏"""
        print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞—Ç—á–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö {batch_size} –∑–∞–ø–∏—Å–µ–π...")
        
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        df = pd.read_csv(input_file)
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ batch_size –∑–∞–ø–∏—Å–µ–π —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
        valid_domains = df[df['company_domain'].notna() & (df['company_domain'] != '')]
        batch_df = valid_domains.head(batch_size)
        
        print(f"–û—Ç–æ–±—Ä–∞–Ω–æ {len(batch_df)} –∑–∞–ø–∏—Å–µ–π —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á-—Ñ–∞–π–ª
        batch_filename = f"lumid_canada_batch50_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        batch_file_path = os.path.join(os.path.dirname(input_file), batch_filename)
        batch_df.to_csv(batch_file_path, index=False)
        
        print(f"–ë–∞—Ç—á-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {batch_file_path}")
        return batch_file_path
        
    def process_batch(self, input_file: str, batch_size: int = 50):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞"""
        print(f"\n{'='*80}")
        print("LUMID CANADA BATCH SCRAPER - –ó–ê–ü–£–°–ö")
        print(f"{'='*80}")
        print(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
        print(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        print(f"Session ID: {self.session_id}")
        print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"{'='*80}")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ç—á-—Ñ–∞–π–ª
            batch_file = self.prepare_batch_file(input_file, batch_size)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ–≥–æ –±–∞—Ç—á–∞ (–±–µ–∑ –ª–∏–º–∏—Ç–∞ test_limit)
            print(f"\n–ó–ê–ü–£–°–ö –ú–ê–°–°–û–í–û–ì–û –°–ö–†–ï–ô–ü–ò–ù–ì–ê...")
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö {batch_size} —Å–∞–π—Ç–æ–≤...")
            
            output_file = self.processor.process_csv_file(batch_file, test_limit=None)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            session_report = self.processor.get_session_report()
            session_summary = session_report["session_summary"]
            
            total_time = time.time() - self.start_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫—Ä–∏–ø—Ç–∞
            SCRIPT_STATS["total_runs"] += 1
            SCRIPT_STATS["success_count"] += session_summary["domains_processed"]
            SCRIPT_STATS["last_run"] = datetime.now().isoformat()
            SCRIPT_STATS["avg_processing_time"] = total_time
            
            print(f"\n{'='*80}")
            print("LUMID CANADA BATCH SCRAPER - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
            print(f"{'='*80}")
            print(f"‚úÖ –ë–∞—Ç—á-—Ñ–∞–π–ª: {batch_file}")
            print(f"‚úÖ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
            print(f"‚úÖ –î–æ–º–µ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {session_summary['domains_processed']}")
            print(f"‚úÖ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {session_summary['total_pages_found']}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö AI –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–π: {session_summary['successful_ai_prioritizations']}")
            print(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {session_summary['success_rate']}%")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${session_summary['total_cost']:.4f}")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
            print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –¥–æ–º–µ–Ω: {session_summary['average_time_per_domain']:.2f}—Å")
            print(f"üìä Dashboard –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            print(f"{'='*80}")
            
            return {
                "success": True,
                "batch_file": batch_file,
                "output_file": output_file,
                "session_summary": session_summary,
                "total_time": total_time,
                "session_id": self.session_id
            }
            
        except Exception as e:
            SCRIPT_STATS["error_count"] += 1
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞: {str(e)}")
            import traceback
            traceback.print_exc()
            
            return {
                "success": False,
                "error": str(e),
                "session_id": self.session_id
            }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    input_file = "../../leads/raw/lumid_canada_20250108.csv"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ leads/raw/")
        return
        
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä
    scraper = LumidCanadaBatchScraper()
    result = scraper.process_batch(input_file, batch_size=50)
    
    if result["success"]:
        print(f"\nüéâ –ë–ê–¢–ß-–°–ö–†–ï–ô–ü–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result['output_file']}")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['total_time']:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–û—Ç–∫—Ä–æ–π—Ç–µ dashboard/index.html –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    else:
        print(f"\n‚ùå –ë–ê–¢–ß-–°–ö–†–ï–ô–ü–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô: {result['error']}")
        
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫—Ä–∏–ø—Ç–∞
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–†–ò–ü–¢–ê:")
    print(f"–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {SCRIPT_STATS['total_runs']}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {SCRIPT_STATS['success_count']}")
    print(f"–û—à–∏–±–æ–∫: {SCRIPT_STATS['error_count']}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {SCRIPT_STATS['last_run']}")

if __name__ == "__main__":
    main()