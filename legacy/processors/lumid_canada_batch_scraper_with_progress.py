#!/usr/bin/env python3
"""
Lumid Canada Batch Website Intelligence Scraper –° –ü–†–û–ì–†–ï–°–°-–ë–ê–†–û–ú
–ú–∞—Å—Å–æ–≤—ã–π —Å–∫—Ä–µ–π–ø–∏–Ω–≥ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

import sys
import os
import time
import pandas as pd
from datetime import datetime
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ dashboard –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'dashboard'))

# –ò–º–ø–æ—Ä—Ç—ã
from website_intelligence_with_dashboard import WebsiteIntelligenceWithDashboard

class ProgressTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º"""
    
    def __init__(self, total_items):
        self.total_items = total_items
        self.current_item = 0
        self.start_time = time.time()
        self.completed_domains = []
        self.failed_domains = []
        self.running = True
        
    def update(self, domain=None, success=True):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        self.current_item += 1
        if domain:
            if success:
                self.completed_domains.append(domain)
            else:
                self.failed_domains.append(domain)
        
    def get_progress_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        elapsed = time.time() - self.start_time
        if self.current_item > 0:
            avg_time = elapsed / self.current_item
            remaining_time = avg_time * (self.total_items - self.current_item)
        else:
            avg_time = 0
            remaining_time = 0
            
        progress_percent = (self.current_item / self.total_items) * 100
        
        return {
            "current": self.current_item,
            "total": self.total_items,
            "percent": progress_percent,
            "elapsed": elapsed,
            "remaining": remaining_time,
            "avg_per_item": avg_time,
            "success_count": len(self.completed_domains),
            "failed_count": len(self.failed_domains)
        }
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"""
        self.running = False

class LumidCanadaBatchScraperWithProgress:
    """–ë–∞—Ç—á-—Å–∫—Ä–µ–π–ø–µ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    
    def __init__(self):
        self.processor = WebsiteIntelligenceWithDashboard()
        self.start_time = time.time()
        self.session_id = f"lumid_canada_progress_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.progress_tracker = None
        
    def progress_monitor_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥"""
        while self.progress_tracker and self.progress_tracker.running:
            time.sleep(10)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if self.progress_tracker.running:
                info = self.progress_tracker.get_progress_info()
                print(f"\n{'='*60}")
                print(f"üïê –ü–†–û–ì–†–ï–°–°: {info['current']}/{info['total']} ({info['percent']:.1f}%)")
                print(f"‚è±Ô∏è  –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {info['elapsed']:.0f}—Å ({info['elapsed']/60:.1f}–º–∏–Ω)")
                print(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {info['remaining']:.0f}—Å ({info['remaining']/60:.1f}–º–∏–Ω)")
                print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –¥–æ–º–µ–Ω: {info['avg_per_item']:.1f}—Å")
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {info['success_count']}")
                print(f"‚ùå –û—à–∏–±–æ–∫: {info['failed_count']}")
                print(f"{'='*60}\n")
        
    def prepare_batch_file(self, input_file: str, batch_size: int = 50) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç CSV —Ñ–∞–π–ª —Å –ø–µ—Ä–≤—ã–º–∏ batch_size –∑–∞–ø–∏—Å—è–º–∏"""
        print(f"üìÇ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞—Ç—á–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö {batch_size} –∑–∞–ø–∏—Å–µ–π...")
        
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        df = pd.read_csv(input_file)
        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ batch_size –∑–∞–ø–∏—Å–µ–π —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
        valid_domains = df[df['company_domain'].notna() & (df['company_domain'] != '')]
        batch_df = valid_domains.head(batch_size)
        
        print(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(batch_df)} –∑–∞–ø–∏—Å–µ–π —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏")
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print(f"\nüìã –°–ü–ò–°–û–ö –î–û–ú–ï–ù–û–í –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò:")
        for i, domain in enumerate(batch_df['company_domain'].tolist(), 1):
            print(f"  {i:2d}. {domain}")
        print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á-—Ñ–∞–π–ª
        batch_filename = f"lumid_canada_batch50_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        batch_file_path = os.path.join(os.path.dirname(input_file), batch_filename)
        batch_df.to_csv(batch_file_path, index=False)
        
        print(f"üíæ –ë–∞—Ç—á-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {batch_file_path}")
        return batch_file_path, len(batch_df)
        
    def process_batch(self, input_file: str, batch_size: int = 50):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        print(f"\n{'='*80}")
        print("üöÄ LUMID CANADA BATCH SCRAPER WITH PROGRESS - –ó–ê–ü–£–°–ö")
        print(f"{'='*80}")
        print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
        print(f"üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        print(f"üÜî Session ID: {self.session_id}")
        print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üíª –û–±—Ä–∞–±–æ—Ç–∫–∞: HTTP-—Ç–æ–ª—å–∫–æ —Å–∫—Ä–µ–π–ø–∏–Ω–≥ + OpenAI –∞–Ω–∞–ª–∏–∑")
        print(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: 3 –ø–æ—Ç–æ–∫–∞")
        print(f"{'='*80}")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ç—á-—Ñ–∞–π–ª
            batch_file, actual_count = self.prepare_batch_file(input_file, batch_size)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_tracker = ProgressTracker(actual_count)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_thread = threading.Thread(target=self.progress_monitor_thread)
            progress_thread.daemon = True
            progress_thread.start()
            
            print(f"\nüî• –ó–ê–ü–£–°–ö –ú–ê–°–°–û–í–û–ì–û –°–ö–†–ï–ô–ü–ò–ù–ì–ê...")
            print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö {actual_count} —Å–∞–π—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...")
            print(f"üì° –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            print(f"{'='*80}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ–≥–æ –±–∞—Ç—á–∞
            output_file = self.processor.process_csv_file(batch_file, test_limit=None)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_tracker.stop()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            session_report = self.processor.get_session_report()
            session_summary = session_report["session_summary"]
            
            total_time = time.time() - self.start_time
            
            print(f"\n{'='*80}")
            print("üéâ LUMID CANADA BATCH SCRAPER - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
            print(f"{'='*80}")
            print(f"‚úÖ –ë–∞—Ç—á-—Ñ–∞–π–ª: {batch_file}")
            print(f"‚úÖ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
            print(f"üìä –î–æ–º–µ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {session_summary['domains_processed']}")
            print(f"üîç –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {session_summary['total_pages_found']}")
            print(f"ü§ñ –£—Å–ø–µ—à–Ω—ã—Ö AI –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–π: {session_summary['successful_ai_prioritizations']}")
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {session_summary['success_rate']}%")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${session_summary['total_cost']:.4f}")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å ({total_time/60:.1f}–º–∏–Ω)")
            print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –¥–æ–º–µ–Ω: {session_summary['average_time_per_domain']:.2f}—Å")
            print(f"üìä Dashboard –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  üîó API –≤—ã–∑–æ–≤–æ–≤: {session_summary.get('total_api_calls', 'N/A')}")
            print(f"  üìÑ –°—Ä–µ–¥–Ω–µ–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –¥–æ–º–µ–Ω: {session_summary['average_pages_per_domain']:.1f}")
            print(f"  üí∏ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –¥–æ–º–µ–Ω: ${session_summary['total_cost']/max(session_summary['domains_processed'], 1):.4f}")
            print(f"  üöÄ –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {session_summary['domains_processed']/(total_time/60):.1f} –¥–æ–º–µ–Ω–æ–≤/–º–∏–Ω")
            
            print(f"{'='*80}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
            if session_summary['success_rate'] < 90:
                print(f"  ‚ö†Ô∏è  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ {session_summary['success_rate']}% - —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã")
            if session_summary['average_time_per_domain'] > 30:
                print(f"  ‚ö†Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {session_summary['average_time_per_domain']:.1f}—Å - –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å")
            if session_summary['total_cost'] > 5.0:
                print(f"  üí∞ –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ${session_summary['total_cost']:.2f} - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ gpt-3.5-turbo")
            
            print(f"\nüåê –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print(f"  1. üìä –û—Ç–∫—Ä–æ–π—Ç–µ dashboard/index.html –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            print(f"  2. üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {os.path.basename(output_file)}")
            print(f"  3. üîÑ –î–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è {745-actual_count} –¥–æ–º–µ–Ω–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –±–∞—Ç—á")
            print(f"  4. ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
            
            return {
                "success": True,
                "batch_file": batch_file,
                "output_file": output_file,
                "session_summary": session_summary,
                "total_time": total_time,
                "session_id": self.session_id,
                "performance_metrics": {
                    "domains_per_minute": session_summary['domains_processed']/(total_time/60),
                    "cost_per_domain": session_summary['total_cost']/max(session_summary['domains_processed'], 1),
                    "pages_per_domain": session_summary['average_pages_per_domain'],
                    "api_calls": session_summary.get('total_api_calls', 0)
                }
            }
            
        except Exception as e:
            if self.progress_tracker:
                self.progress_tracker.stop()
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞: {str(e)}")
            import traceback
            traceback.print_exc()
            
            return {
                "success": False,
                "error": str(e),
                "session_id": self.session_id
            }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"üéØ LUMID CANADA BATCH SCRAPER WITH PROGRESS")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    input_file = "../../leads/raw/lumid_canada_20250108.csv"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        print("üìÅ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ leads/raw/")
        return
        
    print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {input_file}")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä
    scraper = LumidCanadaBatchScraperWithProgress()
    result = scraper.process_batch(input_file, batch_size=50)
    
    if result["success"]:
        print(f"\nüéâ –ë–ê–¢–ß-–°–ö–†–ï–ô–ü–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {os.path.basename(result['output_file'])}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {result['total_time']:.1f}—Å ({result['total_time']/60:.1f}–º–∏–Ω)")
        
        perf = result['performance_metrics']
        print(f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {perf['domains_per_minute']:.1f} –¥–æ–º–µ–Ω–æ–≤/–º–∏–Ω")
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${perf['cost_per_domain']:.4f}/–¥–æ–º–µ–Ω")
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {perf['pages_per_domain']:.1f}/–¥–æ–º–µ–Ω")
        
        print(f"\nüìä –û—Ç–∫—Ä–æ–π—Ç–µ dashboard/index.html –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    else:
        print(f"\n‚ùå –ë–ê–¢–ß-–°–ö–†–ï–ô–ü–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô: {result['error']}")

if __name__ == "__main__":
    main()